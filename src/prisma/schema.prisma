// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ForcastRating {
  id          String   @id @default(cuid())
  timestamp   DateTime @db.Timestamptz
  utcOffset   Int
  location    Json
  ratingKey   String
  ratingValue Float
  forcastId   String   @unique
  forcast     Forcast  @relation(fields: [forcastId], references: [id])
}

model ForcastWaveSwells {
  id            String      @id @default(cuid())
  height        Float
  period        Float
  impact        Float
  power         Float
  direction     Float
  directionMin  Float
  optimalScore  Int
  forcastWaveId String
  forcastWave   ForcastWave @relation(fields: [forcastWaveId], references: [id])
}

model ForcastWave {
  id               String              @id @default(cuid())
  timestamp        DateTime            @db.Timestamptz
  utcOffset        Int
  units            Json
  location         Json
  forecastLocation Json
  offshoreLocation Json
  waveHeightMin    Float
  waveHeightMax    Float
  plus             Boolean
  humanRelation    String
  waveHeightRawMin Float
  waveHeightRawMax Float
  optimalScore     Int
  power            Float
  waveSwells       ForcastWaveSwells[]
  forcastId        String              @unique
  forcast          Forcast             @relation(fields: [forcastId], references: [id])
}

model ForcastWind {
  id            String   @id @default(cuid())
  timestamp     DateTime @db.Timestamptz
  utcOffset     Int
  units         Json
  location      Json
  speed         Float
  direction     Float
  directionType String
  gust          Float
  optimalScore  Int
  forcastId     String   @unique
  forcast       Forcast  @relation(fields: [forcastId], references: [id])
}

model ForcastTide {
  id           String   @id @default(cuid())
  timestamp    DateTime @db.Timestamptz
  utcOffset    Int
  units        Json
  tideLocation Json
  type         String
  height       Float
  forcastId    String   @unique
  forcast      Forcast  @relation(fields: [forcastId], references: [id])
}

model ForcastSunLight {
  id        String   @id @default(cuid())
  timestamp DateTime @db.Timestamptz
  utcOffset Int
  midnight  DateTime
  dawn      DateTime
  sunrise   DateTime
  sunset    DateTime
  dusk      DateTime
  forcastId String   @unique
  forcast   Forcast  @relation(fields: [forcastId], references: [id])
}

model ForcastWeather {
  id          String   @id @default(cuid())
  timestamp   DateTime @db.Timestamptz
  utcOffset   Int
  units       Json
  temperature Float
  condition   String
  pressure    Float
  forcastId   String   @unique
  forcast     Forcast  @relation(fields: [forcastId], references: [id])
}

model Forcast {
  id         String           @id @default(cuid())
  timestamp  DateTime         @db.Timestamptz
  utcOffset  Int
  location   Location         @relation(fields: [locationId], references: [id])
  locationId String
  rating     ForcastRating?
  waves      ForcastWave?
  wind       ForcastWind?
  tides      ForcastTide?
  sunlight   ForcastSunLight?
  weather    ForcastWeather?

  @@unique([timestamp, locationId])
}

model Location {
  id               String         @id @default(cuid())
  name             String
  type             String
  city             String?
  state            String?
  zip              String?
  country          String?
  external_id      String?
  external_spot_id String?        @unique
  SurfActivity     SurfActivity[]
  Forcast          Forcast[]

  @@unique([type, external_id])
  @@unique([type, external_spot_id])
}

model SurfActivity {
  id                String              @id @default(cuid())
  date              DateTime            @db.Date
  locationId        String
  location          Location            @relation(fields: [locationId], references: [id])
  createdById       String
  createdBy         User                @relation(fields: [createdById], references: [id])
  SurfActivityUsers SurfActivityUsers[]
  SurfRating        SurfRating[]
}

model SurfRating {
  id             String       @id @default(cuid())
  surfActivityId String
  surfActivity   SurfActivity @relation(fields: [surfActivityId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  notes          String?
  rating         Int
  size           Int
  shape          Int

  @@unique(fields: [surfActivityId, userId], name: "surfRating_surfActivityId_userId")
}

model SurfActivityUsers {
  id             String       @id @default(cuid())
  surfActivityId String
  surfActivity   SurfActivity @relation(fields: [surfActivityId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id])

  @@unique(fields: [surfActivityId, userId], name: "surfActivityUsers_surfActivityId_userId")
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  firstName           String
  lastName            String
  phoneNumber         String?
  password            String?
  admin               Boolean?
  image               String?
  emailVerified       DateTime?           @map("email_verified")
  surfActivity        SurfActivityUsers[]
  mySurfActivity      SurfActivity[]
  sessions            Session[]
  Account             Account[]
  SurfRating          SurfRating[]
  sentFriendships     Friendship[]        @relation("FriendshipFromUser")
  receivedFriendships Friendship[]        @relation("FriendshipToUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Friendship {
  id         String   @id @default(cuid())
  fromUser   User     @relation("FriendshipFromUser", fields: [fromUserId], references: [id])
  fromUserId String
  toUser     User     @relation("FriendshipToUser", fields: [toUserId], references: [id])
  toUserId   String
  status     String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([fromUserId, toUserId])
}
