// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id               String         @id @default(cuid())
  name             String
  type             String
  city             String?
  state            String?
  zip              String?
  country          String?
  external_id      String?
  external_spot_id String?
  SurfActivity     SurfActivity[]

  @@unique([type, external_id])
  @@unique([type, external_spot_id])
}

model SurfActivity {
  id                String              @id @default(cuid())
  date              DateTime            @db.Date
  locationId        String
  location          Location            @relation(fields: [locationId], references: [id])
  createdById       String
  createdBy         User                @relation(fields: [createdById], references: [id])
  SurfActivityUsers SurfActivityUsers[]
  SurfRating        SurfRating[]
}

model SurfRating {
  id             String       @id @default(cuid())
  surfActivityId String
  surfActivity   SurfActivity @relation(fields: [surfActivityId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  rating         Int
  size           Int
  shape          Int

  @@unique(fields: [surfActivityId, userId], name: "surfRating_surfActivityId_userId")
}

model SurfActivityUsers {
  id             String       @id @default(cuid())
  surfActivityId String
  surfActivity   SurfActivity @relation(fields: [surfActivityId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])

  @@unique(fields: [surfActivityId, userId], name: "surfActivityUsers_surfActivityId_userId")
}

model User {
  id             String              @id @default(cuid())
  email          String              @unique
  firstName      String
  lastName       String
  phoneNumber    String?
  password       String?
  admin          Boolean?
  surfActivity   SurfActivityUsers[]
  mySurfActivity SurfActivity[]
  sessions       Session[]
  Account        Account[]
  SurfRating     SurfRating[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
